%{
#include <iostream>
#include <iomanip>
#include "roboparser.tab.h"      // file generated by Bison
using std::cout;
using std::endl;
using std::left;
using std::setw;

                // Function prototype 
void writeToken(const char* toktype);


int line_num = 1;      // to keep line numbers 
%}


     /* -- OPTIONS and DEFINITIONS -- */
%option noyywrap


WHITE      [ \t]
DIGIT      [0-9]
ALPHA      [a-zA-Z]
ALPHANUM   [a-zA-Z0-9]


%%   /* -- REGULAR EXPRESSIONS ------------------------------------ */


WHITE      ;                /* eat white space */
\n         { line_num++; }  /* count line numbers */


                /* Keywork tokens */
"is"       { writeToken("K_IS"); return K_IS; }
"~"        { writeToken("K_NEG"); return K_NEG; }
"("        { writeToken("K_LPAREN"); return K_LPAREN; }
")"        { writeToken("K_RPAREN"); return K_RPAREN; }
"!"        { writeToken("K_BANG"); return K_BANG; }
"forward"  { writeToken("K_FORWARD"); return K_FORWARD; }
"rotate"   { writeToken("K_ROTATE"); return K_ROTATE; }
"if"       { writeToken("K_IF"); return K_IF; }
"endif"    { writeToken("K_ENDIF"); return K_ENDIF; }
"else"     { writeToken("K_ELSE"); return K_ELSE; }
"while"    { writeToken("K_WHILE"); return K_WHILE; }
"endw"     { writeToken("K_ENDW"); return K_ENDW; }
"prog"     { writeToken("K_PROG"); return K_PROG; }
"blip"     { writeToken("K_BLIP"); return K_BLIP; }
"blorp"    { writeToken("K_BLORP"); return K_BLORP; }


                /* Complex Tokens */
[+-]?{DIGIT}+              { writeToken("T_INTEGER"); return T_INTEGER; }
[+-]?{DIGIT}+\.{DIGIT}+    { writeToken("T_DECIMAL"); return T_DECIMAL; }
{ALPHA}{ALPHANUM}*         { writeToken("T_IDENT"); return T_IDENT; }
[<>=#]                     { writeToken("T_RELATION"); return T_RELATION; }
[+\-(or)]                  { writeToken("T_ADDOPERATOR"); return T_ADDOPERATOR; }
[*/(and)]                  { writeToken("T_MULOPERATOR"); return T_MULOPERATOR; }



%%   /* -- CODA --------------------------------------------------- */


// Purpose: prints that a token was found 
void writeToken(const char* toktype)
{
  cout << "TOKEN: "; 
  cout << left << setw(14) << toktype;       
  cout << "LEXEME: " << yytext << endl;
}



